#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe';
    else
        alias open='xdg-open';
    fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Copy the response of function
function copy() {
    $@ | pbcopy
}

# Zip modified files in git repository
# WARNING: it expects the git alias `mod` to be something like:
# `git ls-files --modified --others --exclude-standard`
# WARNING: Keep in mind that it won't zip the staged files.
# Usage:
#   zipgitchanges # for generating zip
#   zipgitchanges e # for generating encrypted zip
#   zipgitchanges eb # for generating encrypted zip and copy it to location
function zipgitchanges() {
    filename="$(printf '%s---%s' "${PWD##*/}" "$(date +"%Y-%m-%d--%H-%M-%S")").zip";

    # check if zip has to be encrypted
    encrypt=;

    if [[ $1 == *e* ]]; then
        encrypt='--encrypt';
    fi;

    # zip files
    zip $encrypt $filename $(git mod);

    # copy/backup to different location
    if [[ $1 == *b* ]]; then
        if [ ! -f $filename ]; then
            printf "\n\nCan not backup, file $red$filename$reset not found!\n";

            return;
        fi;

        # backupLocation="/Users/ifdattic/Library/CloudStorage/GoogleDrive-EMAIL/My Drive/gitbackups";
        backupLocation="/Users/ifdattic/Google Drive/My Drive/gitbackups"

        mv "$filename" "$backupLocation";

        printf "\n\nGit changes backed up to $green$backupLocation$reset as $green$filename\n";
    fi;
}

# Zip current folder and encrypt it
function zipthis() {
    filename="${PWD##*/}.zip";

    zip -er "$filename" .
}

function crypten() {
    FILENAME=$1
    FILENAME_ENCRYPTED="$1.des3"

    if [[ -z "$FILENAME" ]]; then
        echo "crypten <name of file>"
        echo "  - crypten is a script to encrypt files using des3"
        exit;
    fi

    openssl des3 -salt -in "$FILENAME" -out "$FILENAME_ENCRYPTED" && rm "$FILENAME"
}

function cryptde() {
    FILENAME_ENCRYPTED=$1
    FILENAME="${FILENAME_ENCRYPTED%.[^.]*}"

    if [[ -z "$FILENAME_ENCRYPTED" ]]; then
        echo "cryptde <name of file>"
        echo "  - cryptde is a script to decrypt des3 encrypted files"
        exit;
    fi

    openssl des3 -d -salt -in "$FILENAME_ENCRYPTED" -out "$FILENAME" && rm "$FILENAME_ENCRYPTED"
}

# Sleep after minutes
# https://en.wikipedia.org/wiki/Pmset
function sleepafterminutes() {
    SLEEP_AT="$(date -d "$1 mins" "+%D %T")"
    echo $SLEEP_AT
    sudo pmset schedule sleep "$SLEEP_AT"
}
